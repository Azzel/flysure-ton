// automatically generated from `stdlib.fc` `flysure-code.fc` 
PROGRAM{
  DECLPROC send_message_back
  DECLPROC save_data
  DECLPROC load_data
  DECLPROC ~complete_policy
  DECLPROC recv_internal
  DECLPROC recv_external
  85143 DECLMETHOD seqno
  send_message_back PROC:<{
    0 PUSHINT
    24 PUSHINT
    NEWC
    6 STU
    s0 s6 XCHG2
    STSLICER
    ROT
    STGRAMS
    s1 s4 XCHG
    107 STU
    s1 s2 XCHG
    32 STU
    32 STU
    ENDC
    SWAP
    SENDRAWMSG
  }>
  save_data PROC:<{
    NEWC
    s1 s6 XCHG
    32 STU
    s1 s4 XCHG
    256 STU
    ROT
    STGRAMS
    SWAP
    STGRAMS
    SWAP
    STGRAMS
    STDICT
    ENDC
    c4 POP
  }>
  load_data PROC:<{
    c4 PUSH
    CTOS
    32 LDU
    256 LDU
    LDGRAMS
    LDGRAMS
    LDGRAMS
    LDDICT
    DROP
  }>
  ~complete_policy PROC:<{
    8 PUSHPOW2
    s3 s5 s5 PUXC2
    DICTUDELGET
    NULLSWAPIFNOT
    2DROP
    0 PUSHINT
    196 PUSHINT
    NEWC
    9 STU
    s1 s5 XCHG
    8 STI
    s1 s3 XCHG
    256 STU
    SWAP
    STGRAMS
    s1 s2 XCHG
    107 STU
    s1 s2 XCHG
    8 STU
    ENDC
    3 PUSHINT
    SENDRAWMSG
  }>
  recv_internal PROC:<{
    SWAP
    CTOS
    4 LDU
    SWAP
    1 PUSHINT
    AND
    IFJMP:<{
      3 BLKDROP
    }>
    OVER
    SEMPTY
    IFJMP:<{
      3 BLKDROP
    }>
    LDMSGADDR
    DROP
    DUP
    REWRITESTDADDR
    load_data CALLDICT
    s10 s3 PUSH2
    EQUAL
    IFNOTJMP:<{
      s8 s10 XCHG
      10 BLKDROP
      4294967294 PUSHINT
      48 PUSHINT
      0 PUSHINT
      64 PUSHINT
      send_message_back CALLDICT
    }>
    s6 s0 PUSH2
    8 PUSHPOW2
    DICTUGET
    NULLSWAPIFNOT
    NIP
    IFJMP:<{
      s8 s10 XCHG
      10 BLKDROP
      4294967294 PUSHINT
      49 PUSHINT
      0 PUSHINT
      64 PUSHINT
      send_message_back CALLDICT
    }>
    s8 POP
    s0 s8 XCHG
    32 LDU
    OVER
    NOW
    LEQ
    DROP
    32 LDU
    DROP
    NEWC
    s1 s8 XCHG
    8 STI
    32 STU
    s1 s6 XCHG
    32 STU
    s0 s4 s6 XCHG3
    8 PUSHPOW2
    DICTUSETB
    s5 s6 XCHG2
    ADD
    s4 s5 XCHG
    s3 s4 XCHG
    s0 s3 XCHG2
    save_data CALLDICT
  }>
  recv_external PROC:<{
    9 PUSHPOW2
    LDSLICEX
    DUP
    32 LDU
    32 LDU
    load_data CALLDICT
    s8 s5 XCPU
    EQUAL
    33 THROWIFNOT
    s0 s4 XCHG
    INC
    s0 s8 XCHG
    HASHSU
    s0 s9 s3 XC2PU
    CHKSIGNU
    35 THROWIFNOT
    ACCEPT
    s0 s4 XCHG
    1 EQINT
    IF:<{
      s0 s2 XCHG
      32 LDU
      32 LDU
      8 LDU
      DROP
      -1 PUSHINT
      UNTIL:<{
        s7 PUSH
        8 PUSHPOW2
        DICTUGETNEXT
        NULLSWAPIFNOT
        NULLSWAPIFNOT
        DUP
        IF:<{
          s0 s2 XCHG
          8 LDU
          32 LDU
          32 LDU
          DROP
          s6 PUSH
          EQUAL
          s1 s7 XCPU
          EQUAL
          AND
          IF:<{
            s3 PUSH
            NOT
            s7 PUSH
            AND
            s12 PUSH
            GEQ
            IF:<{
              s6 s11 XCPU
              SUB
              8 PUSHPOW2
              s2 s10 s10 PUXC2
              DICTUDELGET
              NULLSWAPIFNOT
              2DROP
              0 PUSHINT
              196 PUSHINT
              NEWC
              9 STU
              s1 s8 XCHG
              8 STI
              s2 s(-1) PUXC
              256 STU
              s12 PUSH
              STGRAMS
              s1 s7 XCHG
              107 STU
              s3 s(-1) PUXC
              8 STU
              ENDC
              3 PUSHINT
              SENDRAWMSG
              s5 s8 XCHG
            }>ELSE<{
              DROP
            }>
          }>ELSE<{
            DROP
          }>
        }>ELSE<{
          s2 POP
        }>
        SWAP
        NOT
      }>
      4 BLKDROP
    }>ELSE<{
      s2 POP
    }>
    s4 s5 XCHG
    4 1 REVERSE
    ROT
    save_data CALLDICT
  }>
  seqno PROC:<{
    c4 PUSH
    CTOS
    32 PLDU
  }>
}END>c
